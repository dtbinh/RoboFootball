//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Arbiter.CommunicationSvc {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Command", Namespace="http://schemas.datacontract.org/2004/07/Communication.DataContracts")]
    [System.SerializableAttribute()]
    public partial class Command : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CommunicationSvc.ICommandManager")]
    public interface ICommandManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandManager/AddCommand", ReplyAction="http://tempuri.org/ICommandManager/AddCommandResponse")]
        bool AddCommand(Arbiter.CommunicationSvc.Command command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandManager/AddCommand", ReplyAction="http://tempuri.org/ICommandManager/AddCommandResponse")]
        System.Threading.Tasks.Task<bool> AddCommandAsync(Arbiter.CommunicationSvc.Command command);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICommandManagerChannel : Arbiter.CommunicationSvc.ICommandManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CommandManagerClient : System.ServiceModel.ClientBase<Arbiter.CommunicationSvc.ICommandManager>, Arbiter.CommunicationSvc.ICommandManager {
        
        public CommandManagerClient() {
        }
        
        public CommandManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CommandManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommandManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommandManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddCommand(Arbiter.CommunicationSvc.Command command) {
            return base.Channel.AddCommand(command);
        }
        
        public System.Threading.Tasks.Task<bool> AddCommandAsync(Arbiter.CommunicationSvc.Command command) {
            return base.Channel.AddCommandAsync(command);
        }
    }
}
