//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Arbiter.ObserverSvc {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UnitData", Namespace="http://schemas.datacontract.org/2004/07/Configuration.DataContracts")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Arbiter.ObserverSvc.ControllCenterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Arbiter.ObserverSvc.PlayerData))]
    public partial class UnitData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte TeamIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte TeamId {
            get {
                return this.TeamIdField;
            }
            set {
                if ((this.TeamIdField.Equals(value) != true)) {
                    this.TeamIdField = value;
                    this.RaisePropertyChanged("TeamId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ControllCenterData", Namespace="http://schemas.datacontract.org/2004/07/Configuration.DataContracts")]
    [System.SerializableAttribute()]
    public partial class ControllCenterData : Arbiter.ObserverSvc.UnitData {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerData", Namespace="http://schemas.datacontract.org/2004/07/Configuration.DataContracts")]
    [System.SerializableAttribute()]
    public partial class PlayerData : Arbiter.ObserverSvc.UnitData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte MachineIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Drawing.Color MarkerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MarkerPositionXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MarkerPositionYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WidthField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Length {
            get {
                return this.LengthField;
            }
            set {
                if ((this.LengthField.Equals(value) != true)) {
                    this.LengthField = value;
                    this.RaisePropertyChanged("Length");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte MachineId {
            get {
                return this.MachineIdField;
            }
            set {
                if ((this.MachineIdField.Equals(value) != true)) {
                    this.MachineIdField = value;
                    this.RaisePropertyChanged("MachineId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Drawing.Color Marker {
            get {
                return this.MarkerField;
            }
            set {
                if ((this.MarkerField.Equals(value) != true)) {
                    this.MarkerField = value;
                    this.RaisePropertyChanged("Marker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MarkerPositionX {
            get {
                return this.MarkerPositionXField;
            }
            set {
                if ((this.MarkerPositionXField.Equals(value) != true)) {
                    this.MarkerPositionXField = value;
                    this.RaisePropertyChanged("MarkerPositionX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MarkerPositionY {
            get {
                return this.MarkerPositionYField;
            }
            set {
                if ((this.MarkerPositionYField.Equals(value) != true)) {
                    this.MarkerPositionYField = value;
                    this.RaisePropertyChanged("MarkerPositionY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Width {
            get {
                return this.WidthField;
            }
            set {
                if ((this.WidthField.Equals(value) != true)) {
                    this.WidthField = value;
                    this.RaisePropertyChanged("Width");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PhysicInfo", Namespace="http://schemas.datacontract.org/2004/07/Observer.DataContracts")]
    [System.SerializableAttribute()]
    public partial class PhysicInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Drawing.Point AccelerationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Drawing.Point CoordinatesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Drawing.Point DirectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Drawing.Point SpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeStempField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Drawing.Point Acceleration {
            get {
                return this.AccelerationField;
            }
            set {
                if ((this.AccelerationField.Equals(value) != true)) {
                    this.AccelerationField = value;
                    this.RaisePropertyChanged("Acceleration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Drawing.Point Coordinates {
            get {
                return this.CoordinatesField;
            }
            set {
                if ((this.CoordinatesField.Equals(value) != true)) {
                    this.CoordinatesField = value;
                    this.RaisePropertyChanged("Coordinates");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Drawing.Point Direction {
            get {
                return this.DirectionField;
            }
            set {
                if ((this.DirectionField.Equals(value) != true)) {
                    this.DirectionField = value;
                    this.RaisePropertyChanged("Direction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Drawing.Point Speed {
            get {
                return this.SpeedField;
            }
            set {
                if ((this.SpeedField.Equals(value) != true)) {
                    this.SpeedField = value;
                    this.RaisePropertyChanged("Speed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeStemp {
            get {
                return this.TimeStempField;
            }
            set {
                if ((this.TimeStempField.Equals(value) != true)) {
                    this.TimeStempField = value;
                    this.RaisePropertyChanged("TimeStemp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ObserverSvc.IObserver")]
    public interface IObserver {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserver/GetPlayerPhysicInfo", ReplyAction="http://tempuri.org/IObserver/GetPlayerPhysicInfoResponse")]
        Arbiter.ObserverSvc.PhysicInfo GetPlayerPhysicInfo(Arbiter.ObserverSvc.PlayerData playerData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserver/GetPlayerPhysicInfo", ReplyAction="http://tempuri.org/IObserver/GetPlayerPhysicInfoResponse")]
        System.Threading.Tasks.Task<Arbiter.ObserverSvc.PhysicInfo> GetPlayerPhysicInfoAsync(Arbiter.ObserverSvc.PlayerData playerData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserver/GetAllRobotsPhysicInfo", ReplyAction="http://tempuri.org/IObserver/GetAllRobotsPhysicInfoResponse")]
        Arbiter.ObserverSvc.PhysicInfo GetAllRobotsPhysicInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserver/GetAllRobotsPhysicInfo", ReplyAction="http://tempuri.org/IObserver/GetAllRobotsPhysicInfoResponse")]
        System.Threading.Tasks.Task<Arbiter.ObserverSvc.PhysicInfo> GetAllRobotsPhysicInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserver/GetBallPhysicInfo", ReplyAction="http://tempuri.org/IObserver/GetBallPhysicInfoResponse")]
        Arbiter.ObserverSvc.PhysicInfo GetBallPhysicInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserver/GetBallPhysicInfo", ReplyAction="http://tempuri.org/IObserver/GetBallPhysicInfoResponse")]
        System.Threading.Tasks.Task<Arbiter.ObserverSvc.PhysicInfo> GetBallPhysicInfoAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IObserverChannel : Arbiter.ObserverSvc.IObserver, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ObserverClient : System.ServiceModel.ClientBase<Arbiter.ObserverSvc.IObserver>, Arbiter.ObserverSvc.IObserver {
        
        public ObserverClient() {
        }
        
        public ObserverClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ObserverClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ObserverClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ObserverClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Arbiter.ObserverSvc.PhysicInfo GetPlayerPhysicInfo(Arbiter.ObserverSvc.PlayerData playerData) {
            return base.Channel.GetPlayerPhysicInfo(playerData);
        }
        
        public System.Threading.Tasks.Task<Arbiter.ObserverSvc.PhysicInfo> GetPlayerPhysicInfoAsync(Arbiter.ObserverSvc.PlayerData playerData) {
            return base.Channel.GetPlayerPhysicInfoAsync(playerData);
        }
        
        public Arbiter.ObserverSvc.PhysicInfo GetAllRobotsPhysicInfo() {
            return base.Channel.GetAllRobotsPhysicInfo();
        }
        
        public System.Threading.Tasks.Task<Arbiter.ObserverSvc.PhysicInfo> GetAllRobotsPhysicInfoAsync() {
            return base.Channel.GetAllRobotsPhysicInfoAsync();
        }
        
        public Arbiter.ObserverSvc.PhysicInfo GetBallPhysicInfo() {
            return base.Channel.GetBallPhysicInfo();
        }
        
        public System.Threading.Tasks.Task<Arbiter.ObserverSvc.PhysicInfo> GetBallPhysicInfoAsync() {
            return base.Channel.GetBallPhysicInfoAsync();
        }
    }
}
