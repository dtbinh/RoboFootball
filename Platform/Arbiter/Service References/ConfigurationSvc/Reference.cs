//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Arbiter.ConfigurationSvc {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameGeometry", Namespace="http://schemas.datacontract.org/2004/07/Configuration.DataContracts")]
    [System.SerializableAttribute()]
    public partial class GameGeometry : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BallRadiusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FieldRadiusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GateWidthField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BallRadius {
            get {
                return this.BallRadiusField;
            }
            set {
                if ((this.BallRadiusField.Equals(value) != true)) {
                    this.BallRadiusField = value;
                    this.RaisePropertyChanged("BallRadius");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FieldRadius {
            get {
                return this.FieldRadiusField;
            }
            set {
                if ((this.FieldRadiusField.Equals(value) != true)) {
                    this.FieldRadiusField = value;
                    this.RaisePropertyChanged("FieldRadius");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GateWidth {
            get {
                return this.GateWidthField;
            }
            set {
                if ((this.GateWidthField.Equals(value) != true)) {
                    this.GateWidthField = value;
                    this.RaisePropertyChanged("GateWidth");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameTimings", Namespace="http://schemas.datacontract.org/2004/07/Configuration.DataContracts")]
    [System.SerializableAttribute()]
    public partial class GameTimings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BeforeStartTimeoutLengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime GameStartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TimeCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TimeLengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TimeOutLengthField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BeforeStartTimeoutLength {
            get {
                return this.BeforeStartTimeoutLengthField;
            }
            set {
                if ((this.BeforeStartTimeoutLengthField.Equals(value) != true)) {
                    this.BeforeStartTimeoutLengthField = value;
                    this.RaisePropertyChanged("BeforeStartTimeoutLength");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime GameStartDate {
            get {
                return this.GameStartDateField;
            }
            set {
                if ((this.GameStartDateField.Equals(value) != true)) {
                    this.GameStartDateField = value;
                    this.RaisePropertyChanged("GameStartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TimeCount {
            get {
                return this.TimeCountField;
            }
            set {
                if ((this.TimeCountField.Equals(value) != true)) {
                    this.TimeCountField = value;
                    this.RaisePropertyChanged("TimeCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TimeLength {
            get {
                return this.TimeLengthField;
            }
            set {
                if ((this.TimeLengthField.Equals(value) != true)) {
                    this.TimeLengthField = value;
                    this.RaisePropertyChanged("TimeLength");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TimeOutLength {
            get {
                return this.TimeOutLengthField;
            }
            set {
                if ((this.TimeOutLengthField.Equals(value) != true)) {
                    this.TimeOutLengthField = value;
                    this.RaisePropertyChanged("TimeOutLength");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameMembership", Namespace="http://schemas.datacontract.org/2004/07/Configuration.DataContracts")]
    [System.SerializableAttribute()]
    public partial class GameMembership : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TeamCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<Arbiter.ConfigurationSvc.TeamMembership> TeamsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TeamCount {
            get {
                return this.TeamCountField;
            }
            set {
                if ((this.TeamCountField.Equals(value) != true)) {
                    this.TeamCountField = value;
                    this.RaisePropertyChanged("TeamCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Arbiter.ConfigurationSvc.TeamMembership> Teams {
            get {
                return this.TeamsField;
            }
            set {
                if ((object.ReferenceEquals(this.TeamsField, value) != true)) {
                    this.TeamsField = value;
                    this.RaisePropertyChanged("Teams");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TeamMembership", Namespace="http://schemas.datacontract.org/2004/07/Configuration.DataContracts")]
    [System.SerializableAttribute()]
    public partial class TeamMembership : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ControlCenterCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<Arbiter.ConfigurationSvc.ControllCenterData> ControlCentersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte GateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PlayerCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<Arbiter.ConfigurationSvc.PlayerData> PlayersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte TeamIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TeamNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ControlCenterCount {
            get {
                return this.ControlCenterCountField;
            }
            set {
                if ((this.ControlCenterCountField.Equals(value) != true)) {
                    this.ControlCenterCountField = value;
                    this.RaisePropertyChanged("ControlCenterCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Arbiter.ConfigurationSvc.ControllCenterData> ControlCenters {
            get {
                return this.ControlCentersField;
            }
            set {
                if ((object.ReferenceEquals(this.ControlCentersField, value) != true)) {
                    this.ControlCentersField = value;
                    this.RaisePropertyChanged("ControlCenters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte GateId {
            get {
                return this.GateIdField;
            }
            set {
                if ((this.GateIdField.Equals(value) != true)) {
                    this.GateIdField = value;
                    this.RaisePropertyChanged("GateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlayerCount {
            get {
                return this.PlayerCountField;
            }
            set {
                if ((this.PlayerCountField.Equals(value) != true)) {
                    this.PlayerCountField = value;
                    this.RaisePropertyChanged("PlayerCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Arbiter.ConfigurationSvc.PlayerData> Players {
            get {
                return this.PlayersField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayersField, value) != true)) {
                    this.PlayersField = value;
                    this.RaisePropertyChanged("Players");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte TeamId {
            get {
                return this.TeamIdField;
            }
            set {
                if ((this.TeamIdField.Equals(value) != true)) {
                    this.TeamIdField = value;
                    this.RaisePropertyChanged("TeamId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TeamName {
            get {
                return this.TeamNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TeamNameField, value) != true)) {
                    this.TeamNameField = value;
                    this.RaisePropertyChanged("TeamName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ControllCenterData", Namespace="http://schemas.datacontract.org/2004/07/Configuration.DataContracts")]
    [System.SerializableAttribute()]
    public partial class ControllCenterData : Arbiter.ConfigurationSvc.UnitData {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerData", Namespace="http://schemas.datacontract.org/2004/07/Configuration.DataContracts")]
    [System.SerializableAttribute()]
    public partial class PlayerData : Arbiter.ConfigurationSvc.UnitData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Arbiter.ConfigurationSvc.RobotData RobotDataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Arbiter.ConfigurationSvc.RobotData RobotData {
            get {
                return this.RobotDataField;
            }
            set {
                if ((object.ReferenceEquals(this.RobotDataField, value) != true)) {
                    this.RobotDataField = value;
                    this.RaisePropertyChanged("RobotData");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UnitData", Namespace="http://schemas.datacontract.org/2004/07/Configuration.DataContracts")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Arbiter.ConfigurationSvc.PlayerData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Arbiter.ConfigurationSvc.ControllCenterData))]
    public partial class UnitData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte TeamIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte TeamId {
            get {
                return this.TeamIdField;
            }
            set {
                if ((this.TeamIdField.Equals(value) != true)) {
                    this.TeamIdField = value;
                    this.RaisePropertyChanged("TeamId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RobotData", Namespace="http://schemas.datacontract.org/2004/07/Configuration.DataContracts")]
    [System.SerializableAttribute()]
    public partial class RobotData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte MachineIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Arbiter.ConfigurationSvc.Color MarkerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MarkerPositionXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MarkerPositionYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WidthField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Length {
            get {
                return this.LengthField;
            }
            set {
                if ((this.LengthField.Equals(value) != true)) {
                    this.LengthField = value;
                    this.RaisePropertyChanged("Length");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte MachineId {
            get {
                return this.MachineIdField;
            }
            set {
                if ((this.MachineIdField.Equals(value) != true)) {
                    this.MachineIdField = value;
                    this.RaisePropertyChanged("MachineId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Arbiter.ConfigurationSvc.Color Marker {
            get {
                return this.MarkerField;
            }
            set {
                if ((object.ReferenceEquals(this.MarkerField, value) != true)) {
                    this.MarkerField = value;
                    this.RaisePropertyChanged("Marker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MarkerPositionX {
            get {
                return this.MarkerPositionXField;
            }
            set {
                if ((this.MarkerPositionXField.Equals(value) != true)) {
                    this.MarkerPositionXField = value;
                    this.RaisePropertyChanged("MarkerPositionX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MarkerPositionY {
            get {
                return this.MarkerPositionYField;
            }
            set {
                if ((this.MarkerPositionYField.Equals(value) != true)) {
                    this.MarkerPositionYField = value;
                    this.RaisePropertyChanged("MarkerPositionY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Width {
            get {
                return this.WidthField;
            }
            set {
                if ((this.WidthField.Equals(value) != true)) {
                    this.WidthField = value;
                    this.RaisePropertyChanged("Width");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Color", Namespace="http://schemas.datacontract.org/2004/07/Configuration.DataContracts")]
    [System.SerializableAttribute()]
    public partial class Color : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte aField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte bField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte gField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte rField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte a {
            get {
                return this.aField;
            }
            set {
                if ((this.aField.Equals(value) != true)) {
                    this.aField = value;
                    this.RaisePropertyChanged("a");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte b {
            get {
                return this.bField;
            }
            set {
                if ((this.bField.Equals(value) != true)) {
                    this.bField = value;
                    this.RaisePropertyChanged("b");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte g {
            get {
                return this.gField;
            }
            set {
                if ((this.gField.Equals(value) != true)) {
                    this.gField = value;
                    this.RaisePropertyChanged("g");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte r {
            get {
                return this.rField;
            }
            set {
                if ((this.rField.Equals(value) != true)) {
                    this.rField = value;
                    this.RaisePropertyChanged("r");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameRules", Namespace="http://schemas.datacontract.org/2004/07/Configuration.DataContracts")]
    [System.SerializableAttribute()]
    public partial class GameRules : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConfigurationSvc.INotificationManager", CallbackContract=typeof(Arbiter.ConfigurationSvc.INotificationManagerCallback))]
    public interface INotificationManager {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotificationManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotificationManager/OnConfigurationIsReady")]
        void OnConfigurationIsReady();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotificationManagerChannel : Arbiter.ConfigurationSvc.INotificationManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotificationManagerClient : System.ServiceModel.DuplexClientBase<Arbiter.ConfigurationSvc.INotificationManager>, Arbiter.ConfigurationSvc.INotificationManager {
        
        public NotificationManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public NotificationManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public NotificationManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConfigurationSvc.IGeometryManager")]
    public interface IGeometryManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeometryManager/SetGameGeometry", ReplyAction="http://tempuri.org/IGeometryManager/SetGameGeometryResponse")]
        void SetGameGeometry(Arbiter.ConfigurationSvc.GameGeometry geometry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeometryManager/SetGameGeometry", ReplyAction="http://tempuri.org/IGeometryManager/SetGameGeometryResponse")]
        System.Threading.Tasks.Task SetGameGeometryAsync(Arbiter.ConfigurationSvc.GameGeometry geometry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeometryManager/GetGameGeometry", ReplyAction="http://tempuri.org/IGeometryManager/GetGameGeometryResponse")]
        Arbiter.ConfigurationSvc.GameGeometry GetGameGeometry();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeometryManager/GetGameGeometry", ReplyAction="http://tempuri.org/IGeometryManager/GetGameGeometryResponse")]
        System.Threading.Tasks.Task<Arbiter.ConfigurationSvc.GameGeometry> GetGameGeometryAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGeometryManagerChannel : Arbiter.ConfigurationSvc.IGeometryManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GeometryManagerClient : System.ServiceModel.ClientBase<Arbiter.ConfigurationSvc.IGeometryManager>, Arbiter.ConfigurationSvc.IGeometryManager {
        
        public GeometryManagerClient() {
        }
        
        public GeometryManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GeometryManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GeometryManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GeometryManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SetGameGeometry(Arbiter.ConfigurationSvc.GameGeometry geometry) {
            base.Channel.SetGameGeometry(geometry);
        }
        
        public System.Threading.Tasks.Task SetGameGeometryAsync(Arbiter.ConfigurationSvc.GameGeometry geometry) {
            return base.Channel.SetGameGeometryAsync(geometry);
        }
        
        public Arbiter.ConfigurationSvc.GameGeometry GetGameGeometry() {
            return base.Channel.GetGameGeometry();
        }
        
        public System.Threading.Tasks.Task<Arbiter.ConfigurationSvc.GameGeometry> GetGameGeometryAsync() {
            return base.Channel.GetGameGeometryAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConfigurationSvc.ITimingManager")]
    public interface ITimingManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimingManager/SetGameTimings", ReplyAction="http://tempuri.org/ITimingManager/SetGameTimingsResponse")]
        void SetGameTimings(Arbiter.ConfigurationSvc.GameTimings timings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimingManager/SetGameTimings", ReplyAction="http://tempuri.org/ITimingManager/SetGameTimingsResponse")]
        System.Threading.Tasks.Task SetGameTimingsAsync(Arbiter.ConfigurationSvc.GameTimings timings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimingManager/GetGameTimings", ReplyAction="http://tempuri.org/ITimingManager/GetGameTimingsResponse")]
        Arbiter.ConfigurationSvc.GameTimings GetGameTimings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimingManager/GetGameTimings", ReplyAction="http://tempuri.org/ITimingManager/GetGameTimingsResponse")]
        System.Threading.Tasks.Task<Arbiter.ConfigurationSvc.GameTimings> GetGameTimingsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITimingManagerChannel : Arbiter.ConfigurationSvc.ITimingManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TimingManagerClient : System.ServiceModel.ClientBase<Arbiter.ConfigurationSvc.ITimingManager>, Arbiter.ConfigurationSvc.ITimingManager {
        
        public TimingManagerClient() {
        }
        
        public TimingManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TimingManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TimingManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TimingManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SetGameTimings(Arbiter.ConfigurationSvc.GameTimings timings) {
            base.Channel.SetGameTimings(timings);
        }
        
        public System.Threading.Tasks.Task SetGameTimingsAsync(Arbiter.ConfigurationSvc.GameTimings timings) {
            return base.Channel.SetGameTimingsAsync(timings);
        }
        
        public Arbiter.ConfigurationSvc.GameTimings GetGameTimings() {
            return base.Channel.GetGameTimings();
        }
        
        public System.Threading.Tasks.Task<Arbiter.ConfigurationSvc.GameTimings> GetGameTimingsAsync() {
            return base.Channel.GetGameTimingsAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConfigurationSvc.IMembershipManager")]
    public interface IMembershipManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembershipManager/GetMembership", ReplyAction="http://tempuri.org/IMembershipManager/GetMembershipResponse")]
        Arbiter.ConfigurationSvc.GameMembership GetMembership();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembershipManager/GetMembership", ReplyAction="http://tempuri.org/IMembershipManager/GetMembershipResponse")]
        System.Threading.Tasks.Task<Arbiter.ConfigurationSvc.GameMembership> GetMembershipAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembershipManager/GetTeam", ReplyAction="http://tempuri.org/IMembershipManager/GetTeamResponse")]
        Arbiter.ConfigurationSvc.TeamMembership GetTeam(byte TeamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembershipManager/GetTeam", ReplyAction="http://tempuri.org/IMembershipManager/GetTeamResponse")]
        System.Threading.Tasks.Task<Arbiter.ConfigurationSvc.TeamMembership> GetTeamAsync(byte TeamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembershipManager/GetPalyer", ReplyAction="http://tempuri.org/IMembershipManager/GetPalyerResponse")]
        Arbiter.ConfigurationSvc.PlayerData GetPalyer(byte PlayerId, byte TeamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembershipManager/GetPalyer", ReplyAction="http://tempuri.org/IMembershipManager/GetPalyerResponse")]
        System.Threading.Tasks.Task<Arbiter.ConfigurationSvc.PlayerData> GetPalyerAsync(byte PlayerId, byte TeamId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMembershipManagerChannel : Arbiter.ConfigurationSvc.IMembershipManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MembershipManagerClient : System.ServiceModel.ClientBase<Arbiter.ConfigurationSvc.IMembershipManager>, Arbiter.ConfigurationSvc.IMembershipManager {
        
        public MembershipManagerClient() {
        }
        
        public MembershipManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MembershipManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MembershipManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MembershipManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Arbiter.ConfigurationSvc.GameMembership GetMembership() {
            return base.Channel.GetMembership();
        }
        
        public System.Threading.Tasks.Task<Arbiter.ConfigurationSvc.GameMembership> GetMembershipAsync() {
            return base.Channel.GetMembershipAsync();
        }
        
        public Arbiter.ConfigurationSvc.TeamMembership GetTeam(byte TeamId) {
            return base.Channel.GetTeam(TeamId);
        }
        
        public System.Threading.Tasks.Task<Arbiter.ConfigurationSvc.TeamMembership> GetTeamAsync(byte TeamId) {
            return base.Channel.GetTeamAsync(TeamId);
        }
        
        public Arbiter.ConfigurationSvc.PlayerData GetPalyer(byte PlayerId, byte TeamId) {
            return base.Channel.GetPalyer(PlayerId, TeamId);
        }
        
        public System.Threading.Tasks.Task<Arbiter.ConfigurationSvc.PlayerData> GetPalyerAsync(byte PlayerId, byte TeamId) {
            return base.Channel.GetPalyerAsync(PlayerId, TeamId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConfigurationSvc.IMembershipSetup")]
    public interface IMembershipSetup {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembershipSetup/RegisterTeam", ReplyAction="http://tempuri.org/IMembershipSetup/RegisterTeamResponse")]
        Arbiter.ConfigurationSvc.TeamMembership RegisterTeam(byte TeamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembershipSetup/RegisterTeam", ReplyAction="http://tempuri.org/IMembershipSetup/RegisterTeamResponse")]
        System.Threading.Tasks.Task<Arbiter.ConfigurationSvc.TeamMembership> RegisterTeamAsync(byte TeamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembershipSetup/RegisterRobot", ReplyAction="http://tempuri.org/IMembershipSetup/RegisterRobotResponse")]
        Arbiter.ConfigurationSvc.PlayerData RegisterRobot(byte PlayerId, byte TeamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembershipSetup/RegisterRobot", ReplyAction="http://tempuri.org/IMembershipSetup/RegisterRobotResponse")]
        System.Threading.Tasks.Task<Arbiter.ConfigurationSvc.PlayerData> RegisterRobotAsync(byte PlayerId, byte TeamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembershipSetup/UnRegisterRobot", ReplyAction="http://tempuri.org/IMembershipSetup/UnRegisterRobotResponse")]
        void UnRegisterRobot(byte PlayerId, byte TeamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembershipSetup/UnRegisterRobot", ReplyAction="http://tempuri.org/IMembershipSetup/UnRegisterRobotResponse")]
        System.Threading.Tasks.Task UnRegisterRobotAsync(byte PlayerId, byte TeamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembershipSetup/ConfirmTeam", ReplyAction="http://tempuri.org/IMembershipSetup/ConfirmTeamResponse")]
        void ConfirmTeam(byte TeamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembershipSetup/ConfirmTeam", ReplyAction="http://tempuri.org/IMembershipSetup/ConfirmTeamResponse")]
        System.Threading.Tasks.Task ConfirmTeamAsync(byte TeamId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMembershipSetupChannel : Arbiter.ConfigurationSvc.IMembershipSetup, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MembershipSetupClient : System.ServiceModel.ClientBase<Arbiter.ConfigurationSvc.IMembershipSetup>, Arbiter.ConfigurationSvc.IMembershipSetup {
        
        public MembershipSetupClient() {
        }
        
        public MembershipSetupClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MembershipSetupClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MembershipSetupClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MembershipSetupClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Arbiter.ConfigurationSvc.TeamMembership RegisterTeam(byte TeamId) {
            return base.Channel.RegisterTeam(TeamId);
        }
        
        public System.Threading.Tasks.Task<Arbiter.ConfigurationSvc.TeamMembership> RegisterTeamAsync(byte TeamId) {
            return base.Channel.RegisterTeamAsync(TeamId);
        }
        
        public Arbiter.ConfigurationSvc.PlayerData RegisterRobot(byte PlayerId, byte TeamId) {
            return base.Channel.RegisterRobot(PlayerId, TeamId);
        }
        
        public System.Threading.Tasks.Task<Arbiter.ConfigurationSvc.PlayerData> RegisterRobotAsync(byte PlayerId, byte TeamId) {
            return base.Channel.RegisterRobotAsync(PlayerId, TeamId);
        }
        
        public void UnRegisterRobot(byte PlayerId, byte TeamId) {
            base.Channel.UnRegisterRobot(PlayerId, TeamId);
        }
        
        public System.Threading.Tasks.Task UnRegisterRobotAsync(byte PlayerId, byte TeamId) {
            return base.Channel.UnRegisterRobotAsync(PlayerId, TeamId);
        }
        
        public void ConfirmTeam(byte TeamId) {
            base.Channel.ConfirmTeam(TeamId);
        }
        
        public System.Threading.Tasks.Task ConfirmTeamAsync(byte TeamId) {
            return base.Channel.ConfirmTeamAsync(TeamId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConfigurationSvc.IRuleManager")]
    public interface IRuleManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRuleManager/SetGameRules", ReplyAction="http://tempuri.org/IRuleManager/SetGameRulesResponse")]
        void SetGameRules(Arbiter.ConfigurationSvc.GameRules rules);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRuleManager/SetGameRules", ReplyAction="http://tempuri.org/IRuleManager/SetGameRulesResponse")]
        System.Threading.Tasks.Task SetGameRulesAsync(Arbiter.ConfigurationSvc.GameRules rules);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRuleManager/GetGameRules", ReplyAction="http://tempuri.org/IRuleManager/GetGameRulesResponse")]
        Arbiter.ConfigurationSvc.GameRules GetGameRules();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRuleManager/GetGameRules", ReplyAction="http://tempuri.org/IRuleManager/GetGameRulesResponse")]
        System.Threading.Tasks.Task<Arbiter.ConfigurationSvc.GameRules> GetGameRulesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRuleManagerChannel : Arbiter.ConfigurationSvc.IRuleManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RuleManagerClient : System.ServiceModel.ClientBase<Arbiter.ConfigurationSvc.IRuleManager>, Arbiter.ConfigurationSvc.IRuleManager {
        
        public RuleManagerClient() {
        }
        
        public RuleManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RuleManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RuleManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RuleManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SetGameRules(Arbiter.ConfigurationSvc.GameRules rules) {
            base.Channel.SetGameRules(rules);
        }
        
        public System.Threading.Tasks.Task SetGameRulesAsync(Arbiter.ConfigurationSvc.GameRules rules) {
            return base.Channel.SetGameRulesAsync(rules);
        }
        
        public Arbiter.ConfigurationSvc.GameRules GetGameRules() {
            return base.Channel.GetGameRules();
        }
        
        public System.Threading.Tasks.Task<Arbiter.ConfigurationSvc.GameRules> GetGameRulesAsync() {
            return base.Channel.GetGameRulesAsync();
        }
    }
}
